{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Template for plotting an energy distrubution for larger molecules. \n",
    "Fill in everything with molecule of choice!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "import openfermion\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import pennylane as qml\n",
    "from pennylane import expval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "name ='INSERT NAME HERE';charge = ___ ;multiplicity= ___ ;basis= 'sto-3g';geometry = 'INSERT FILE NAME HERE';\n",
    "\n",
    "ham, nr_qubits = qml.qchem.generate_hamiltonian(\n",
    "    name,\n",
    "    geometry,\n",
    "    charge,\n",
    "    multiplicity,\n",
    "    basis,\n",
    "    mapping='jordan_wigner',\n",
    "    n_active_orbitals=2,\n",
    "    n_active_electrons=2,\n",
    ")\n",
    "print(nr_qubits)\n",
    "\n",
    "\n",
    "\n",
    "dev = qml.device(\"default.qubit\", wires=nr_qubits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def circuit(params, wires):\n",
    "    ''' \n",
    "    \n",
    "    DEFINE THE ANSATZ HERE BASED ON HOW MANY QUBITS THE MOLECULE NEEDS\n",
    "    \n",
    "    '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "qnodes = qml.map(circuit, ham.ops, dev, measure='expval')\n",
    "energy_expval = qml.dot(ham.coeffs, qnodes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feel free to change these at will"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_runs = 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "step_size = 0.3\n",
    "max_iterations = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QUANTUM NATURAL GRADIENT\n",
      "Finished run #0\n",
      "Finished run #10\n",
      "Finished run #20\n",
      "QUANTUM NATURAL GRADIENT, DIAG. APPROX.\n",
      "Finished run #0\n",
      "Finished run #10\n",
      "Finished run #20\n",
      "VANILL GRADIENT DESCENT\n",
      "Finished run #0\n",
      "Finished run #10\n",
      "Finished run #20\n"
     ]
    }
   ],
   "source": [
    "# Lists to store energy histories for all the VQE runs\n",
    "energy_history_QNG = []\n",
    "\n",
    "param_trials = []\n",
    "\n",
    "for i in range(k_runs):\n",
    "    params = np.random.uniform(low=0, high=2*np.pi, size=4).tolist()\n",
    "    param_trials.append(params)\n",
    "\n",
    "    \n",
    "#made this just for QNG, but feel free to copy the code from the k_runs_comparison to run for all optimizers.\n",
    "\n",
    "print(\"QUANTUM NATURAL GRADIENT\")\n",
    "\n",
    "for k in range(k_runs):\n",
    "\n",
    "    # Energy history for a single VQE run\n",
    "    energy_history_single_run_QNG = []\n",
    "\n",
    "    # initialize parameters based on param_trials created above\n",
    "    initial_params = param_trials[k]\n",
    "\n",
    "    params = initial_params\n",
    "    prev_energy = energy_expval(params)\n",
    "    energy_history_single_run_QNG.append(prev_energy)\n",
    "\n",
    "    for n in range(max_iterations):\n",
    "\n",
    "        grad_cost = qml.grad(energy_expval, argnum=[0])\n",
    "        grad_at_point = [float(i) for i in grad_cost(params)[0]] \n",
    "\n",
    "        params = params - step_size * np.dot(np.linalg.pinv(qnodes[0].metric_tensor([params])),\n",
    "                                             grad_at_point)\n",
    "\n",
    "        energy = energy_expval(params)\n",
    "\n",
    "        conv = np.abs(energy - prev_energy)\n",
    "\n",
    "        prev_energy = energy\n",
    "        energy_history_single_run_QNG.append(prev_energy)\n",
    "\n",
    "    if k % 10 == 0:\n",
    "        print('Finished run #{}'.format(k))\n",
    "\n",
    "    energy_history_single_run_QNG = np.array(energy_history_single_run_QNG)\n",
    "\n",
    "    energy_history_QNG.append(energy_history_single_run_QNG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(k_runs):\n",
    "    plt.plot(energy_history_QNG[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create a list to store all the final energy values.\n",
    "\n",
    "final_energy_hist_QNG = []\n",
    "\n",
    "for i in range(len(energy_history)):\n",
    "    final_energy_hist_QNG.append(energy_history_QNG[i][k_runs])\n",
    "\n",
    "#print(final_energy_hist_QNG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create open fermion qubit op so that we can get the groundstate to compare our final energies\n",
    "qubit_op = qml.qchem._terms_to_qubit_operator(ham.coeffs, ham.ops)\n",
    "\n",
    "#create linear op that is compatible with get_ground_state\n",
    "lin_op = openfermion.utils.LinearQubitOperator(ham)\n",
    "\n",
    "#fetch the exact ground state\n",
    "ground_state, eig_vals = openfermion.utils.get_ground_state(lin_op)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plotting the histogram + groundstate for comparison\n",
    "import seaborn as sns\n",
    "\n",
    "sns.distplot(final_energy_hist_QNG, 50, color = 'blue')\n",
    "plt.xlabel('energy')\n",
    "plt.ylabel('probability')\n",
    "\n",
    "plt.axvline(ground_state, color='red')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
