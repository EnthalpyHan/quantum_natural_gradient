{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import packages\n",
    "import numpy as np\n",
    "import pennylane as qml\n",
    "from pennylane import expval, var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "dev = qml.device(\"default.qubit\", wires=2)\n",
    "\n",
    "#create ansatz \n",
    "def ansatz(params, wires):\n",
    "    \n",
    "    #parameterized layer 0\n",
    "    qml.RY(params[0], wires=0)\n",
    "    qml.RY(params[1], wires=1)\n",
    "    \n",
    "    #entanglement\n",
    "    qml.CNOT(wires=[0,1])\n",
    "    \n",
    "    #param layer 1\n",
    "    qml.RY(params[2], wires=0)\n",
    "    qml.RY(params[3], wires=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = 0.4\n",
    "beta = 0.2\n",
    "coeffs = [alpha, alpha, beta]\n",
    "\n",
    "#H2 hamiltonian from Yamamoto 2019\n",
    "obs_list = [\n",
    "    qml.PauliZ(0) @ qml.Identity(1),\n",
    "    qml.Identity(0) @ qml.PauliZ(1),\n",
    "    qml.PauliX(0) @ qml.PauliX(1)\n",
    "]\n",
    "\n",
    "#create qnodes\n",
    "qnodes = qml.map(ansatz, obs_list, dev, measure='expval')\n",
    "\n",
    "#create cost function\n",
    "cost = qml.dot(coeffs, qnodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QUANTUM NATURAL GRADIENT\n",
      "Iteration = 0,  Ground-state energy = 0.70579155 Ha,  Convergence parameter = 1.53038995 Ha\n",
      "Iteration = 20,  Ground-state energy = -0.81912764 Ha,  Convergence parameter = 0.00201111 Ha\n",
      "Iteration = 40,  Ground-state energy = -0.82454651 Ha,  Convergence parameter = 0.00001366 Ha\n",
      "final params:  [-1.62068919 -1.32517619  1.51679689 -1.55267923]\n",
      "VANILLA GRADIENT\n",
      "Iteration = 0,  Ground-state energy = 0.72935795 Ha,  Convergence parameter = 1.55397263 Ha\n",
      "Iteration = 20,  Ground-state energy = 0.41356031 Ha,  Convergence parameter = 0.02600043 Ha\n",
      "Iteration = 40,  Ground-state energy = -0.24865113 Ha,  Convergence parameter = 0.03199803 Ha\n",
      "Iteration = 60,  Ground-state energy = -0.65176630 Ha,  Convergence parameter = 0.01061696 Ha\n",
      "Iteration = 80,  Ground-state energy = -0.76504295 Ha,  Convergence parameter = 0.00290410 Ha\n",
      "Iteration = 100,  Ground-state energy = -0.79938512 Ha,  Convergence parameter = 0.00101500 Ha\n",
      "Iteration = 120,  Ground-state energy = -0.81246672 Ha,  Convergence parameter = 0.00042274 Ha\n",
      "Iteration = 140,  Ground-state energy = -0.81822309 Ha,  Convergence parameter = 0.00019724 Ha\n",
      "Iteration = 160,  Ground-state energy = -0.82102602 Ha,  Convergence parameter = 0.00010051 Ha\n",
      "Iteration = 180,  Ground-state energy = -0.82250425 Ha,  Convergence parameter = 0.00005491 Ha\n"
     ]
    }
   ],
   "source": [
    "#initialize constants\n",
    "max_iterations = 200\n",
    "step_size = 0.05\n",
    "conv_tol = 1e-06\n",
    "\n",
    "optimizers = ['QNG', 'Vanilla']\n",
    "QNG_cost = []\n",
    "vanilla_cost = []\n",
    "\n",
    "\n",
    "prev_energy = cost(params)\n",
    "for k in range(len(algorithms)):\n",
    "    \n",
    "    #Quantum Natural Gradient Descent\n",
    "    if optimizers[k] == 'QNG':\n",
    "        print(\"QUANTUM NATURAL GRADIENT\")\n",
    "        \n",
    "        #initial params (example from Yamamoto 2019, FIG 5)\n",
    "        params = np.array([-0.2,-0.2,0,0])\n",
    "        \n",
    "        for n in range(max_iterations):\n",
    "            #compute the gradient\n",
    "            gradient = qml.grad(cost, argnum=[0])\n",
    "            \n",
    "            #take the gradient of the params\n",
    "            grad_at_point = [float(i) for i in gradient(params)[0]]\n",
    "            \n",
    "            #perform quantum natural gradient.\n",
    "            params = params - step_size * np.dot(\n",
    "                np.linalg.pinv(qnodes[0].metric_tensor([params])), \n",
    "                grad_at_point)\n",
    "            \n",
    "            #compute new energy with updates params\n",
    "            energy = cost(params)\n",
    "            QNG_cost.append(energy)\n",
    "            \n",
    "            #calculate convergence\n",
    "            conv = np.abs(energy - prev_energy)\n",
    "\n",
    "            if n % 20 == 0:\n",
    "                print('Iteration = {:},  Ground-state energy = {:.8f} Ha,  Convergence parameter = {'\n",
    "                      ':.8f} Ha'.format(n, energy, conv))\n",
    "\n",
    "            if conv <= conv_tol:\n",
    "                print(\"final params: \", params)\n",
    "                break\n",
    "\n",
    "            prev_energy = energy\n",
    "            \n",
    "    #Vanilla Gradient Descent\n",
    "    if optimizers[k] == 'Vanilla':\n",
    "        print(\"VANILLA GRADIENT\")\n",
    "        params = np.array([-0.2,-0.2,0,0])\n",
    "        for n in range(max_iterations):\n",
    "            \n",
    "            gradient = qml.grad(cost, argnum=[0])\n",
    "            grad_at_point = [float(i) for i in gradient(params)[0]]\n",
    "            \n",
    "            #calculate vanilla gradient descent\n",
    "            params = params - np.dot(step_size, grad_at_point)\n",
    "            \n",
    "            #calculate new energy with updates params\n",
    "            energy = cost(params)\n",
    "            vanilla_cost.append(energy)\n",
    "            \n",
    "            #calculate convergence\n",
    "            conv = np.abs(energy - prev_energy)\n",
    "\n",
    "            if n % 20 == 0:\n",
    "                print('Iteration = {:},  Ground-state energy = {:.8f} Ha,  Convergence parameter = {'\n",
    "                      ':.8f} Ha'.format(n, energy, conv))\n",
    "\n",
    "            if conv <= conv_tol:\n",
    "                break\n",
    "\n",
    "            prev_energy = energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.plot(QNG_cost, \"black\", label=\"quantum natural gradient descent\")\n",
    "plt.plot(vanilla_cost, \"pink\", label=\"vanilla natural gradient descent\")\n",
    "\n",
    "plt.ylabel(\"Energy\")\n",
    "plt.xlabel(\"Step\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
