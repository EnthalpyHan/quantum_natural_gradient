{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "append_list_error",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hR5xydtWX2-w",
        "colab_type": "text"
      },
      "source": [
        "resources: get statevector (https://discuss.pennylane.ai/t/using-the-state-vector-directly/338/23) \n",
        "\n",
        "\n",
        "\n",
        "*   qng vs vanilla gd on bloch sphere\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dnYeVRqimvjd",
        "colab_type": "code",
        "outputId": "f33ace7f-93c8-4caf-e772-b2f35cc546d3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        }
      },
      "source": [
        "!pip install pennylane-sf --upgrade\n",
        "!pip install qutip --upgrade\n",
        "!pip install tensornetwork"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already up-to-date: pennylane-sf in /usr/local/lib/python3.6/dist-packages (0.8.0)\n",
            "Requirement already satisfied, skipping upgrade: strawberryfields>=0.11 in /usr/local/lib/python3.6/dist-packages (from pennylane-sf) (0.14.0)\n",
            "Requirement already satisfied, skipping upgrade: pennylane>=0.6 in /usr/local/lib/python3.6/dist-packages (from pennylane-sf) (0.8.1)\n",
            "Requirement already satisfied, skipping upgrade: numba in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (0.48.0)\n",
            "Requirement already satisfied, skipping upgrade: requests>=2.22.0 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (2.23.0)\n",
            "Requirement already satisfied, skipping upgrade: sympy>=1.5 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (1.5.1)\n",
            "Requirement already satisfied, skipping upgrade: appdirs in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (1.4.4)\n",
            "Requirement already satisfied, skipping upgrade: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (2.4)\n",
            "Requirement already satisfied, skipping upgrade: python-dateutil>=2.8.0 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (2.8.1)\n",
            "Requirement already satisfied, skipping upgrade: urllib3>=1.25.3 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (1.25.9)\n",
            "Requirement already satisfied, skipping upgrade: thewalrus>=0.12 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (0.12.0)\n",
            "Requirement already satisfied, skipping upgrade: quantum-blackbird>=0.2.3 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (0.2.4)\n",
            "Requirement already satisfied, skipping upgrade: scipy>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (1.4.1)\n",
            "Requirement already satisfied, skipping upgrade: numpy>=1.17.4 in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (1.18.4)\n",
            "Requirement already satisfied, skipping upgrade: toml in /usr/local/lib/python3.6/dist-packages (from strawberryfields>=0.11->pennylane-sf) (0.10.1)\n",
            "Requirement already satisfied, skipping upgrade: semantic-version==2.6 in /usr/local/lib/python3.6/dist-packages (from pennylane>=0.6->pennylane-sf) (2.6.0)\n",
            "Requirement already satisfied, skipping upgrade: autograd in /usr/local/lib/python3.6/dist-packages (from pennylane>=0.6->pennylane-sf) (1.3)\n",
            "Requirement already satisfied, skipping upgrade: llvmlite<0.32.0,>=0.31.0dev0 in /usr/local/lib/python3.6/dist-packages (from numba->strawberryfields>=0.11->pennylane-sf) (0.31.0)\n",
            "Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.6/dist-packages (from numba->strawberryfields>=0.11->pennylane-sf) (46.1.3)\n",
            "Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->strawberryfields>=0.11->pennylane-sf) (3.0.4)\n",
            "Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->strawberryfields>=0.11->pennylane-sf) (2.9)\n",
            "Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->strawberryfields>=0.11->pennylane-sf) (2020.4.5.1)\n",
            "Requirement already satisfied, skipping upgrade: mpmath>=0.19 in /usr/local/lib/python3.6/dist-packages (from sympy>=1.5->strawberryfields>=0.11->pennylane-sf) (1.1.0)\n",
            "Requirement already satisfied, skipping upgrade: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->strawberryfields>=0.11->pennylane-sf) (4.4.2)\n",
            "Requirement already satisfied, skipping upgrade: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.8.0->strawberryfields>=0.11->pennylane-sf) (1.12.0)\n",
            "Requirement already satisfied, skipping upgrade: dask[delayed] in /usr/local/lib/python3.6/dist-packages (from thewalrus>=0.12->strawberryfields>=0.11->pennylane-sf) (2.12.0)\n",
            "Requirement already satisfied, skipping upgrade: antlr4-python3-runtime==4.7.2 in /usr/local/lib/python3.6/dist-packages (from quantum-blackbird>=0.2.3->strawberryfields>=0.11->pennylane-sf) (4.7.2)\n",
            "Requirement already satisfied, skipping upgrade: future>=0.15.2 in /usr/local/lib/python3.6/dist-packages (from autograd->pennylane>=0.6->pennylane-sf) (0.16.0)\n",
            "Requirement already satisfied, skipping upgrade: toolz>=0.7.3; extra == \"delayed\" in /usr/local/lib/python3.6/dist-packages (from dask[delayed]->thewalrus>=0.12->strawberryfields>=0.11->pennylane-sf) (0.10.0)\n",
            "Requirement already satisfied, skipping upgrade: cloudpickle>=0.2.1; extra == \"delayed\" in /usr/local/lib/python3.6/dist-packages (from dask[delayed]->thewalrus>=0.12->strawberryfields>=0.11->pennylane-sf) (1.3.0)\n",
            "Requirement already up-to-date: qutip in /usr/local/lib/python3.6/dist-packages (4.5.0)\n",
            "Requirement already satisfied, skipping upgrade: numpy>=1.12 in /usr/local/lib/python3.6/dist-packages (from qutip) (1.18.4)\n",
            "Requirement already satisfied, skipping upgrade: cython>=0.21 in /usr/local/lib/python3.6/dist-packages (from qutip) (0.29.17)\n",
            "Requirement already satisfied, skipping upgrade: scipy>=1.0 in /usr/local/lib/python3.6/dist-packages (from qutip) (1.4.1)\n",
            "Requirement already satisfied: tensornetwork in /usr/local/lib/python3.6/dist-packages (0.4.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from tensornetwork) (3.2.1)\n",
            "Requirement already satisfied: graphviz>=0.11.1 in /usr/local/lib/python3.6/dist-packages (from tensornetwork) (0.14)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.6/dist-packages (from tensornetwork) (2.10.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.6/dist-packages (from tensornetwork) (1.18.4)\n",
            "Requirement already satisfied: scipy>=1.1 in /usr/local/lib/python3.6/dist-packages (from tensornetwork) (1.4.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from h5py>=2.9.0->tensornetwork) (1.12.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EgydvPmecLAN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tensorflow as tf\n",
        "import pennylane as qml\n",
        "from pennylane.qnodes import PassthruQNode\n",
        "\n",
        "import numpy as np\n",
        "import scipy as sp\n",
        "\n",
        "import qutip as qt\n",
        "from qutip import Bloch, basis"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_3Jgp1daa5K-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dev = qml.device('default.qubit', wires=1)\n",
        "\n",
        "def circuit(params, wires=0):\n",
        "  qml.RX(params[0], wires=wires)\n",
        "  qml.RY(params[1], wires=wires)\n",
        "\n",
        "qnode = PassthruQNode(circuit, dev)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wP6oboYlbkqo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "coeffs = [1, 1]\n",
        "obs = [qml.PauliX(0), qml.PauliZ(0)]\n",
        "\n",
        "H = qml.Hamiltonian(coeffs, obs)\n",
        "qnodes = qml.map(circuit, obs, dev, measure='expval')\n",
        "cost_fn  = qml.dot(coeffs, qnodes)\n",
        "\n",
        "init_params = np.random.uniform(low=0, high=2*np.pi, size=2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "30j8MaJventS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "step_size = 0.01\n",
        "max_iterations = 500\n",
        "conv_tol = 1e-06\n",
        "print_freq = 20"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZQEWJAcnVUld",
        "colab_type": "code",
        "outputId": "1da459d4-8815-40a9-958f-9f799d2ef38a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        }
      },
      "source": [
        "params = init_params\n",
        "prev_energy = cost_fn(params)\n",
        "qng_energies_block = []\n",
        "all_states = []\n",
        "\n",
        "for n in range(max_iterations):\n",
        "    \n",
        "    grad_cost = qml.grad(cost_fn, argnum=[0])\n",
        "    grad_at_point = [float(i) for i in grad_cost(params)[0]] \n",
        "    \n",
        "    params = params - step_size * np.dot(\n",
        "                np.linalg.pinv(qnodes[0].metric_tensor([params])), \n",
        "                grad_at_point)\n",
        "\n",
        "    energy = cost_fn(params)\n",
        "    qng_energies_block.append(energy)\n",
        "    \n",
        "    conv = np.abs(energy - prev_energy)\n",
        "\n",
        "    state_step = dev._state\n",
        "    all_states.append(state_step)\n",
        "\n",
        "    if n % print_freq == 0:\n",
        "        print('Iteration = {:}'.format(n) ,'Energy = {:.8f} Ha,'.format(energy), 'Convergence parameter = {'\n",
        "              ':.8f} Ha'.format(conv), \"State\", state_step)\n",
        "\n",
        "    if conv <= conv_tol:\n",
        "        qng_block_steps = n\n",
        "        break\n",
        "\n",
        "    prev_energy = energy\n",
        "\n",
        "    state_final = dev._state\n",
        "\n",
        "print()\n",
        "print('Final value of the ground-state energy = {:.8f} Ha'.format(energy))\n",
        "print()\n",
        "print(\"Final state\", state_final)\n",
        "print()\n",
        "print('Number of iterations = ', n)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Iteration = 0 Energy = 0.15600095 Ha, Convergence parameter = 0.07461159 Ha State [0.46631216+0.49735071j 0.63331982-0.36619836j]\n",
            "Iteration = 20 Energy = -1.09798577 Ha, Convergence parameter = 0.03398730 Ha State [-0.31035061+0.31209166j  0.8913321 +0.10866638j]\n",
            "Iteration = 40 Energy = -1.37976149 Ha, Convergence parameter = 0.00419391 Ha State [-0.36584753+0.10158901j  0.92423926+0.04021262j]\n",
            "Iteration = 60 Energy = -1.41081958 Ha, Convergence parameter = 0.00041861 Ha State [-0.37795909+0.0317502j   0.9251868 +0.01297065j]\n",
            "Iteration = 80 Energy = -1.41388272 Ha, Convergence parameter = 0.00004086 Ha State [-0.38125941+0.00989945j  0.92440608+0.0040829j ]\n",
            "Iteration = 100 Energy = -1.41418135 Ha, Convergence parameter = 0.00000398 Ha State [-0.38224392+0.00308785j  0.92405542+0.00127732j]\n",
            "\n",
            "Final value of the ground-state energy = -1.41420560 Ha\n",
            "\n",
            "Final state [-0.38245235+0.00162716j  0.92397354+0.00067352j]\n",
            "\n",
            "Number of iterations =  112\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W9gaxDM75jfs",
        "colab_type": "code",
        "outputId": "ab1c0133-3d69-43fc-cdd5-a7ab2242f065",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 692
        }
      },
      "source": [
        "### Convert all statevectors into QObjects ###\n",
        "\n",
        "plot_states = []\n",
        "\n",
        "# Select every 10th statevector #\n",
        "lst = all_states[::10]\n",
        "\n",
        "for i in range(len(lst)):\n",
        "  psi = lst[i]\n",
        "  psi = psi/np.linalg.norm(psi)\n",
        "\n",
        "  # Convert to QObject in QuTiP #\n",
        "  coords = [qt.Qobj(psi)]\n",
        "\n",
        "  plot_states.append(coords)\n",
        "\n",
        "print(plot_states)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[0.46631216+0.49735071j]\n",
            " [0.63331982-0.36619836j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.20142199+0.50918516j]\n",
            " [ 0.827526  +0.123937j  ]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.31035061+0.31209166j]\n",
            " [ 0.8913321 +0.10866638j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.34895611+0.18020322j]\n",
            " [ 0.91709043+0.06856796j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.36584753+0.10158901j]\n",
            " [ 0.92423926+0.04021262j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.37389044+0.05684666j]\n",
            " [ 0.92544418+0.02296672j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.37795909+0.0317502j ]\n",
            " [ 0.9251868 +0.01297065j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.38010217+0.01772807j]\n",
            " [ 0.92474589+0.00728684j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.38125941+0.00989945j]\n",
            " [ 0.92440608+0.0040829j ]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.38189352+0.00552858j]\n",
            " [ 0.92418697+0.00228452j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.38224392+0.00308785j]\n",
            " [ 0.92405542+0.00127732j]]], [Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket\n",
            "Qobj data =\n",
            "[[-0.38243845+0.00172474j]\n",
            " [ 0.92397908+0.00071388j]]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P89ICoOm8ZEY",
        "colab_type": "code",
        "outputId": "352ef31e-fbbd-4c14-8b56-386871d29855",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "source": [
        "from qutip.expect import expect\n",
        "from qutip.operators import sigmax, sigmay, sigmaz\n",
        "\n",
        "cartesian_coords = []\n",
        "coords_x = []\n",
        "coords_y = []\n",
        "coords_z = []\n",
        "\n",
        "for qobj in plot_states:\n",
        "    st = qobj\n",
        "    x = expect(sigmax(), st)\n",
        "    y = expect(sigmay(), st)\n",
        "    z = expect(sigmaz(), st)\n",
        "    vec = [x, y, z] \n",
        "    cartesian_coords.append(vec)\n",
        "    coords_x.append(x)\n",
        "    coords_y.append(y)\n",
        "    coords_z.append(z)\n",
        "\n",
        "print(len(cartesian_coords))"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "12\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MRDmsf2vY6L1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 56
        },
        "outputId": "616080b9-35b2-4398-cab3-ae330f89e95f"
      },
      "source": [
        "x_plot = []\n",
        "y_plot = []\n",
        "z_plot = []\n",
        "\n",
        "\n",
        "for i in range(len(coords_x)):\n",
        "  x_list = coords_x[i].tolist()\n",
        "  x_plot.append(x_list)\n",
        "\n",
        "  y_list = coords_y[i].tolist()\n",
        "  y_plot.append(y_list)\n",
        "  \n",
        "  z_list = coords_z[i].tolist()\n",
        "  z_plot.append(z_list)\n",
        "\n",
        "print(x_plot)"
      ],
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.22639143285988372], [-0.20715010335590772], [-0.48542317273075053], [-0.6153362956892068], [-0.6680909708674903], [-0.6894182972162138], [-0.6985418805442613], [-0.7027374673369235], [-0.704796195446504], [-0.7058567751884971], [-0.7064212361388007], [-0.7067278025121644]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VrvvXOIS8i6F",
        "colab_type": "code",
        "outputId": "ec8ab30a-6de8-466e-e4bc-484ca2d6716a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 769
        }
      },
      "source": [
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import cm\n",
        "\n",
        "### Settings for Bloch sphere visualization ###\n",
        "\n",
        "# normalize colors #\n",
        "nrm = mpl.colors.Normalize(0, len(cartesian_coords))\n",
        "colors = cm.jet(nrm(range(len(cartesian_coords))))\n",
        "b = Bloch()\n",
        "b.point_color = list(colors)\n",
        "b.point_marker = 'o'\n",
        "b.point_size = [10]*4\n",
        "\n",
        "# Add points\n",
        "b.add_states(plot_states, 'point')\n",
        "\n",
        "# Add line\n",
        "b.add_points([x_plot, y_plot, z_plot], 'l')\n",
        "\n",
        "b.show()"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-117-b25092986a3b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_points\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mz_plot\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'l'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/qutip/bloch.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    644\u001b[0m         \u001b[0mDisplay\u001b[0m \u001b[0mBloch\u001b[0m \u001b[0msphere\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcorresponding\u001b[0m \u001b[0mdata\u001b[0m \u001b[0msets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    645\u001b[0m         \"\"\"\n\u001b[0;32m--> 646\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    647\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_from_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shown\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/qutip/bloch.py\u001b[0m in \u001b[0;36mrender\u001b[0;34m(self, fig, axes)\u001b[0m\n\u001b[1;32m    470\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_back\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_points\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_vectors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_front\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/qutip/bloch.py\u001b[0m in \u001b[0;36mplot_points\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    626\u001b[0m                                \u001b[0mreal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    627\u001b[0m                                \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mzdir\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'z'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 628\u001b[0;31m                                color=color)\n\u001b[0m\u001b[1;32m    629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    630\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mplot_annotations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/mpl_toolkits/mplot3d/axes3d.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, xs, ys, zdir, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1420\u001b[0m         \u001b[0;31m# Match length\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1421\u001b[0;31m         \u001b[0mzs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbroadcast_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1422\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1423\u001b[0m         \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mbroadcast_to\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/stride_tricks.py\u001b[0m in \u001b[0;36mbroadcast_to\u001b[0;34m(array, shape, subok)\u001b[0m\n\u001b[1;32m    180\u001b[0m            [1, 2, 3]])\n\u001b[1;32m    181\u001b[0m     \"\"\"\n\u001b[0;32m--> 182\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_broadcast_to\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msubok\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/stride_tricks.py\u001b[0m in \u001b[0;36m_broadcast_to\u001b[0;34m(array, shape, subok, readonly)\u001b[0m\n\u001b[1;32m    125\u001b[0m     it = np.nditer(\n\u001b[1;32m    126\u001b[0m         \u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'multi_index'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'refs_ok'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'zerosize_ok'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mextras\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         op_flags=['readonly'], itershape=shape, order='C')\n\u001b[0m\u001b[1;32m    128\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mit\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m         \u001b[0;31m# never really has writebackifcopy semantics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: input operand has more dimensions than allowed by the axis remapping"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
