{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pennylane as qml\n",
    "from pennylane import expval, var, device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "name ='LiH';charge = 0;multiplicity=1;basis= 'sto-3g';geometry = 'lih.xyz';\n",
    "h, nr_qubits = qml.qchem.generate_hamiltonian(\n",
    "    name,\n",
    "    geometry,\n",
    "    charge,\n",
    "    multiplicity,\n",
    "    basis,\n",
    "    mapping='jordan_wigner',\n",
    "    n_active_orbitals=2,\n",
    "    n_active_electrons=2,\n",
    ")\n",
    "print(nr_qubits)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pi = np.pi\n",
    "\n",
    "class A(qml.operation.Operation):\n",
    "    num_params = 2\n",
    "    num_wires = 2\n",
    "    par_domain = \"R\"\n",
    "    grad_method = \"A\"\n",
    "    \n",
    "    @staticmethod\n",
    "    def _matrix(*params):\n",
    "        \"\"\"Returns the matrix representation of the operator for the\n",
    "        provided parameter values, in the computational basis.\"\"\"\n",
    "        return np.array([[1, 0, 0, 0], \n",
    "                         [0, math.cos(params[0]), np.exp(1j * (params[1])) * math.sin(params[0]), 0], \n",
    "                         [0, np.exp(-1j * (params[1])) * math.sin(params[0]), 0 - math.cos(params[0]), 0], \n",
    "                         [0,0,0,1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dev = qml.device(\"default.qubit\", wires=4)\n",
    "dev.operations.update({\"A\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def circuit(params,wires=[0,1,2,3]):\n",
    "    qml.X(wires=wires[1])\n",
    "    qml.X(wires=wires[2])\n",
    "\n",
    "    A(params[0],params[1], wires=[wires[0],wires[1]])\n",
    "    A(params[2],params[1], wires=[wires[2],wires[3]])\n",
    "    A(params[3],params[1], wires=[wires[1],wires[2]])\n",
    "\n",
    "    A(params[4],params[5], wires=[wires[0],wires[1]])\n",
    "    A(params[6],params[7], wires=[wires[2],wires[3]])\n",
    "    A(params[8],params[9], wires=[wires[1],wires[2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "initial_params = np.random.uniform(low=0, high=2*np.pi, size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "qnodes = qml.map(circuit, h.ops, dev, measure='expval')\n",
    "cost = qml.dot([h.coeffs], qnodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#cost(initial_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
